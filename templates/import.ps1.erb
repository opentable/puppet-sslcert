$pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2
$cert = gi "<%= @location %>\<%= @name %>"
$friendly_name = '<%= @friendly_name %>'
$thumbprint = '<%= @thumbprint %>'

switch -regex ($cert.Extension.ToUpper()) {
    ".CER|.DER|.P12" {
        $pfx.Import("<%= @location %>\<%= @name %>","<%= @password %>","<%= @key_storage_flags %>")
    }
    ".CRT" {
        $pfx.Import([System.IO.File]::ReadAllBytes("<%= @location %>\<%= @name %>"))
    }
    ".P7B|.SST" {
        $pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $pfx.Import([System.IO.File]::ReadAllBytes("<%= @location %>\<%= @name %>"))
    }
    ".PFX|.PKCS12" {
        $pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $pfx.import("<%= @location %>\<%= @name %>","<%= @password %>","<%= @key_storage_flags %>")
    }
}

Get-Item -Path cert:\LocalMachine\My, cert:\<%= @root_store %>\<%= @store_dir %> | ForEach-Object {
  $store = $_
  $oldcerts = $store | Get-ChildItem | Where-Object {($_.FriendlyName -eq "$friendly_name") -OR ($_.Thumbprint -eq "$thumbprint")}
  $store.open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
  $oldcerts | ForEach-Object {
    if($_){$store.Remove($_)}
  }

  foreach($cert in $pfx) {
    if($cert.Thumbprint -ne "$thumbprint") {
      $store.Add($cert)
    }
  }
  $store.close()
}
